package p174e.p199d.p218c.p228n.p229a0;

import java.io.IOException;
import java.util.HashMap;
import okhttp3.internal.http2.Http2;
import p174e.p199d.p217b.C5713n;
import p174e.p199d.p218c.C5722b;

/* renamed from: e.d.c.n.a0.f0 */
public class C5776f0 extends C5722b {

    /* renamed from: f */
    protected static final HashMap<Integer, String> f16281f;

    /* renamed from: g */
    public static final HashMap<String, String> f16282g;

    static {
        HashMap<Integer, String> hashMap = new HashMap<>();
        f16281f = hashMap;
        hashMap.put(0, "Makernote Version");
        hashMap.put(1, "Camera Settings");
        hashMap.put(3, "Camera Settings");
        hashMap.put(64, "Compressed Image Size");
        hashMap.put(129, "Thumbnail Offset");
        hashMap.put(136, "Thumbnail Offset");
        hashMap.put(137, "Thumbnail Length");
        hashMap.put(256, "Thumbnail Image");
        hashMap.put(257, "Colour Mode");
        hashMap.put(258, "Image Quality");
        hashMap.put(259, "Image Quality");
        hashMap.put(260, "Body Firmware Version");
        hashMap.put(512, "Special Mode");
        hashMap.put(513, "JPEG Quality");
        hashMap.put(514, "Macro");
        hashMap.put(515, "BW Mode");
        hashMap.put(516, "Digital Zoom");
        hashMap.put(517, "Focal Plane Diagonal");
        hashMap.put(518, "Lens Distortion Parameters");
        hashMap.put(519, "Camera Type");
        hashMap.put(520, "Pict Info");
        hashMap.put(521, "Camera Id");
        hashMap.put(523, "Image Width");
        hashMap.put(524, "Image Height");
        hashMap.put(525, "Original Manufacturer Model");
        hashMap.put(640, "Preview Image");
        hashMap.put(768, "Pre Capture Frames");
        hashMap.put(769, "White Board");
        hashMap.put(770, "One Touch WB");
        hashMap.put(771, "White Balance Bracket");
        hashMap.put(772, "White Balance Bias");
        hashMap.put(1027, "Scene Mode");
        hashMap.put(1028, "Serial Number");
        hashMap.put(1029, "Firmware");
        hashMap.put(3584, "Print Image Matching (PIM) Info");
        hashMap.put(3840, "Data Dump");
        hashMap.put(3841, "Data Dump 2");
        hashMap.put(4096, "Shutter Speed Value");
        hashMap.put(4097, "ISO Value");
        hashMap.put(4098, "Aperture Value");
        hashMap.put(4099, "Brightness Value");
        hashMap.put(4100, "Flash Mode");
        hashMap.put(4101, "Flash Device");
        hashMap.put(4102, "Bracket");
        hashMap.put(4103, "Sensor Temperature");
        hashMap.put(4104, "Lens Temperature");
        hashMap.put(4105, "Light Condition");
        hashMap.put(4106, "Focus Range");
        hashMap.put(4107, "Focus Mode");
        hashMap.put(4108, "Focus Distance");
        hashMap.put(4109, "Zoom");
        hashMap.put(4110, "Macro Focus");
        hashMap.put(4111, "Sharpness");
        hashMap.put(4112, "Flash Charge Level");
        hashMap.put(4113, "Colour Matrix");
        hashMap.put(4114, "Black Level");
        hashMap.put(4115, "Color Temperature BG");
        hashMap.put(4116, "Color Temperature RG");
        hashMap.put(4117, "White Balance Mode");
        hashMap.put(4119, "Red Balance");
        hashMap.put(4120, "Blue Balance");
        hashMap.put(4121, "Color Matrix Number");
        hashMap.put(4122, "Serial Number");
        hashMap.put(4123, "External Flash AE1 0");
        hashMap.put(4124, "External Flash AE2 0");
        hashMap.put(4125, "Internal Flash AE1 0");
        hashMap.put(4126, "Internal Flash AE2 0");
        hashMap.put(4127, "External Flash AE1");
        hashMap.put(4128, "External Flash AE2");
        hashMap.put(4129, "Internal Flash AE1");
        hashMap.put(4130, "Internal Flash AE2");
        hashMap.put(4131, "Flash Bias");
        hashMap.put(4132, "Internal Flash Table");
        hashMap.put(4133, "External Flash G Value");
        hashMap.put(4134, "External Flash Bounce");
        hashMap.put(4135, "External Flash Zoom");
        hashMap.put(4136, "External Flash Mode");
        hashMap.put(4137, "Contrast");
        hashMap.put(4138, "Sharpness Factor");
        hashMap.put(4139, "Colour Control");
        hashMap.put(4140, "Valid Bits");
        hashMap.put(4141, "Coring Filter");
        hashMap.put(4142, "Olympus Image Width");
        hashMap.put(4143, "Olympus Image Height");
        hashMap.put(4144, "Scene Detect");
        hashMap.put(4145, "Scene Area");
        hashMap.put(4147, "Scene Detect Data");
        hashMap.put(4148, "Compression Ratio");
        hashMap.put(4149, "Preview Image Valid");
        hashMap.put(4150, "Preview Image Start");
        hashMap.put(4151, "Preview Image Length");
        hashMap.put(4152, "AF Result");
        hashMap.put(4153, "CCD Scan Mode");
        hashMap.put(4154, "Noise Reduction");
        hashMap.put(4155, "Infinity Lens Step");
        hashMap.put(4156, "Near Lens Step");
        hashMap.put(4157, "Light Value Center");
        hashMap.put(4158, "Light Value Periphery");
        hashMap.put(4159, "Field Count");
        hashMap.put(8208, "Equipment");
        hashMap.put(8224, "Camera Settings");
        hashMap.put(8240, "Raw Development");
        hashMap.put(8241, "Raw Development 2");
        hashMap.put(8256, "Image Processing");
        hashMap.put(8272, "Focus Info");
        hashMap.put(12288, "Raw Info");
        hashMap.put(Integer.valueOf(Http2.INITIAL_MAX_FRAME_SIZE), "Main Info");
        hashMap.put(61442, "Exposure Mode");
        hashMap.put(61443, "Flash Mode");
        hashMap.put(61444, "White Balance");
        hashMap.put(61445, "Image Size");
        hashMap.put(61446, "Image Quality");
        hashMap.put(61447, "Shooting Mode");
        hashMap.put(61448, "Metering Mode");
        hashMap.put(61449, "Apex Film Speed Value");
        hashMap.put(61450, "Apex Shutter Speed Time Value");
        hashMap.put(61451, "Apex Aperture Value");
        hashMap.put(61452, "Macro Mode");
        hashMap.put(61453, "Digital Zoom");
        hashMap.put(61454, "Exposure Compensation");
        hashMap.put(61455, "Bracket Step");
        hashMap.put(61457, "Interval Length");
        hashMap.put(61458, "Interval Number");
        hashMap.put(61459, "Focal Length");
        hashMap.put(61460, "Focus Distance");
        hashMap.put(61461, "Flash Fired");
        hashMap.put(61462, "Date");
        hashMap.put(61463, "Time");
        hashMap.put(61464, "Max Aperture at Focal Length");
        hashMap.put(61467, "File Number Memory");
        hashMap.put(61468, "Last File Number");
        hashMap.put(61469, "White Balance Red");
        hashMap.put(61470, "White Balance Green");
        hashMap.put(61471, "White Balance Blue");
        hashMap.put(61472, "Saturation");
        hashMap.put(61473, "Contrast");
        hashMap.put(61474, "Sharpness");
        hashMap.put(61475, "Subject Program");
        hashMap.put(61476, "Flash Compensation");
        hashMap.put(61477, "ISO Setting");
        hashMap.put(61478, "Camera Model");
        hashMap.put(61479, "Interval Mode");
        hashMap.put(61480, "Folder Name");
        hashMap.put(61481, "Color Mode");
        hashMap.put(61482, "Color Filter");
        hashMap.put(61483, "Black and White Filter");
        hashMap.put(61484, "Internal Flash");
        hashMap.put(61485, "Apex Brightness Value");
        hashMap.put(61486, "Spot Focus Point X Coordinate");
        hashMap.put(61487, "Spot Focus Point Y Coordinate");
        hashMap.put(61488, "Wide Focus Zone");
        hashMap.put(61489, "Focus Mode");
        hashMap.put(61490, "Focus Area");
        hashMap.put(61491, "DEC Switch Position");
        HashMap<String, String> hashMap2 = new HashMap<>();
        f16282g = hashMap2;
        hashMap2.put("D4028", "X-2,C-50Z");
        hashMap2.put("D4029", "E-20,E-20N,E-20P");
        hashMap2.put("D4034", "C720UZ");
        hashMap2.put("D4040", "E-1");
        hashMap2.put("D4041", "E-300");
        hashMap2.put("D4083", "C2Z,D520Z,C220Z");
        hashMap2.put("D4106", "u20D,S400D,u400D");
        hashMap2.put("D4120", "X-1");
        hashMap2.put("D4122", "u10D,S300D,u300D");
        hashMap2.put("D4125", "AZ-1");
        hashMap2.put("D4141", "C150,D390");
        hashMap2.put("D4193", "C-5000Z");
        hashMap2.put("D4194", "X-3,C-60Z");
        hashMap2.put("D4199", "u30D,S410D,u410D");
        hashMap2.put("D4205", "X450,D535Z,C370Z");
        hashMap2.put("D4210", "C160,D395");
        hashMap2.put("D4211", "C725UZ");
        hashMap2.put("D4213", "FerrariMODEL2003");
        hashMap2.put("D4216", "u15D");
        hashMap2.put("D4217", "u25D");
        hashMap2.put("D4220", "u-miniD,Stylus V");
        hashMap2.put("D4221", "u40D,S500,uD500");
        hashMap2.put("D4231", "FerrariMODEL2004");
        hashMap2.put("D4240", "X500,D590Z,C470Z");
        hashMap2.put("D4244", "uD800,S800");
        hashMap2.put("D4256", "u720SW,S720SW");
        hashMap2.put("D4261", "X600,D630,FE5500");
        hashMap2.put("D4262", "uD600,S600");
        hashMap2.put("D4301", "u810/S810");
        hashMap2.put("D4302", "u710,S710");
        hashMap2.put("D4303", "u700,S700");
        hashMap2.put("D4304", "FE100,X710");
        hashMap2.put("D4305", "FE110,X705");
        hashMap2.put("D4310", "FE-130,X-720");
        hashMap2.put("D4311", "FE-140,X-725");
        hashMap2.put("D4312", "FE150,X730");
        hashMap2.put("D4313", "FE160,X735");
        hashMap2.put("D4314", "u740,S740");
        hashMap2.put("D4315", "u750,S750");
        hashMap2.put("D4316", "u730/S730");
        hashMap2.put("D4317", "FE115,X715");
        hashMap2.put("D4321", "SP550UZ");
        hashMap2.put("D4322", "SP510UZ");
        hashMap2.put("D4324", "FE170,X760");
        hashMap2.put("D4326", "FE200");
        hashMap2.put("D4327", "FE190/X750");
        hashMap2.put("D4328", "u760,S760");
        hashMap2.put("D4330", "FE180/X745");
        hashMap2.put("D4331", "u1000/S1000");
        hashMap2.put("D4332", "u770SW,S770SW");
        hashMap2.put("D4333", "FE240/X795");
        hashMap2.put("D4334", "FE210,X775");
        hashMap2.put("D4336", "FE230/X790");
        hashMap2.put("D4337", "FE220,X785");
        hashMap2.put("D4338", "u725SW,S725SW");
        hashMap2.put("D4339", "FE250/X800");
        hashMap2.put("D4341", "u780,S780");
        hashMap2.put("D4343", "u790SW,S790SW");
        hashMap2.put("D4344", "u1020,S1020");
        hashMap2.put("D4346", "FE15,X10");
        hashMap2.put("D4348", "FE280,X820,C520");
        hashMap2.put("D4349", "FE300,X830");
        hashMap2.put("D4350", "u820,S820");
        hashMap2.put("D4351", "u1200,S1200");
        hashMap2.put("D4352", "FE270,X815,C510");
        hashMap2.put("D4353", "u795SW,S795SW");
        hashMap2.put("D4354", "u1030SW,S1030SW");
        hashMap2.put("D4355", "SP560UZ");
        hashMap2.put("D4356", "u1010,S1010");
        hashMap2.put("D4357", "u830,S830");
        hashMap2.put("D4359", "u840,S840");
        hashMap2.put("D4360", "FE350WIDE,X865");
        hashMap2.put("D4361", "u850SW,S850SW");
        hashMap2.put("D4362", "FE340,X855,C560");
        hashMap2.put("D4363", "FE320,X835,C540");
        hashMap2.put("D4364", "SP570UZ");
        hashMap2.put("D4366", "FE330,X845,C550");
        hashMap2.put("D4368", "FE310,X840,C530");
        hashMap2.put("D4370", "u1050SW,S1050SW");
        hashMap2.put("D4371", "u1060,S1060");
        hashMap2.put("D4372", "FE370,X880,C575");
        hashMap2.put("D4374", "SP565UZ");
        hashMap2.put("D4377", "u1040,S1040");
        hashMap2.put("D4378", "FE360,X875,C570");
        hashMap2.put("D4379", "FE20,X15,C25");
        hashMap2.put("D4380", "uT6000,ST6000");
        hashMap2.put("D4381", "uT8000,ST8000");
        hashMap2.put("D4382", "u9000,S9000");
        hashMap2.put("D4384", "SP590UZ");
        hashMap2.put("D4385", "FE3010,X895");
        hashMap2.put("D4386", "FE3000,X890");
        hashMap2.put("D4387", "FE35,X30");
        hashMap2.put("D4388", "u550WP,S550WP");
        hashMap2.put("D4390", "FE5000,X905");
        hashMap2.put("D4391", "u5000");
        hashMap2.put("D4392", "u7000,S7000");
        hashMap2.put("D4396", "FE5010,X915");
        hashMap2.put("D4397", "FE25,X20");
        hashMap2.put("D4398", "FE45,X40");
        hashMap2.put("D4401", "XZ-1");
        hashMap2.put("D4402", "uT6010,ST6010");
        hashMap2.put("D4406", "u7010,S7010 / u7020,S7020");
        hashMap2.put("D4407", "FE4010,X930");
        hashMap2.put("D4408", "X560WP");
        hashMap2.put("D4409", "FE26,X21");
        hashMap2.put("D4410", "FE4000,X920,X925");
        hashMap2.put("D4411", "FE46,X41,X42");
        hashMap2.put("D4412", "FE5020,X935");
        hashMap2.put("D4413", "uTough-3000");
        hashMap2.put("D4414", "StylusTough-6020");
        hashMap2.put("D4415", "StylusTough-8010");
        hashMap2.put("D4417", "u5010,S5010");
        hashMap2.put("D4418", "u7040,S7040");
        hashMap2.put("D4419", "u9010,S9010");
        hashMap2.put("D4423", "FE4040");
        hashMap2.put("D4424", "FE47,X43");
        hashMap2.put("D4426", "FE4030,X950");
        hashMap2.put("D4428", "FE5030,X965,X960");
        hashMap2.put("D4430", "u7030,S7030");
        hashMap2.put("D4432", "SP600UZ");
        hashMap2.put("D4434", "SP800UZ");
        hashMap2.put("D4439", "FE4020,X940");
        hashMap2.put("D4442", "FE5035");
        hashMap2.put("D4448", "FE4050,X970");
        hashMap2.put("D4450", "FE5050,X985");
        hashMap2.put("D4454", "u-7050");
        hashMap2.put("D4464", "T10,X27");
        hashMap2.put("D4470", "FE5040,X980");
        hashMap2.put("D4472", "TG-310");
        hashMap2.put("D4474", "TG-610");
        hashMap2.put("D4476", "TG-810");
        hashMap2.put("D4478", "VG145,VG140,D715");
        hashMap2.put("D4479", "VG130,D710");
        hashMap2.put("D4480", "VG120,D705");
        hashMap2.put("D4482", "VR310,D720");
        hashMap2.put("D4484", "VR320,D725");
        hashMap2.put("D4486", "VR330,D730");
        hashMap2.put("D4488", "VG110,D700");
        hashMap2.put("D4490", "SP-610UZ");
        hashMap2.put("D4492", "SZ-10");
        hashMap2.put("D4494", "SZ-20");
        hashMap2.put("D4496", "SZ-30MR");
        hashMap2.put("D4498", "SP-810UZ");
        hashMap2.put("D4500", "SZ-11");
        hashMap2.put("D4504", "TG-615");
        hashMap2.put("D4508", "TG-620");
        hashMap2.put("D4510", "TG-820");
        hashMap2.put("D4512", "TG-1");
        hashMap2.put("D4516", "SH-21");
        hashMap2.put("D4519", "SZ-14");
        hashMap2.put("D4520", "SZ-31MR");
        hashMap2.put("D4521", "SH-25MR");
        hashMap2.put("D4523", "SP-720UZ");
        hashMap2.put("D4529", "VG170");
        hashMap2.put("D4531", "XZ-2");
        hashMap2.put("D4535", "SP-620UZ");
        hashMap2.put("D4536", "TG-320");
        hashMap2.put("D4537", "VR340,D750");
        hashMap2.put("D4538", "VG160,X990,D745");
        hashMap2.put("D4541", "SZ-12");
        hashMap2.put("D4545", "VH410");
        hashMap2.put("D4546", "XZ-10");
        hashMap2.put("D4547", "TG-2");
        hashMap2.put("D4548", "TG-830");
        hashMap2.put("D4549", "TG-630");
        hashMap2.put("D4550", "SH-50");
        hashMap2.put("D4553", "SZ-16,DZ-105");
        hashMap2.put("D4562", "SP-820UZ");
        hashMap2.put("D4566", "SZ-15");
        hashMap2.put("D4572", "STYLUS1");
        hashMap2.put("D4574", "TG-3");
        hashMap2.put("D4575", "TG-850");
        hashMap2.put("D4579", "SP-100EE");
        hashMap2.put("D4580", "SH-60");
        hashMap2.put("D4581", "SH-1");
        hashMap2.put("D4582", "TG-835");
        hashMap2.put("D4585", "SH-2 / SH-3");
        hashMap2.put("D4586", "TG-4");
        hashMap2.put("D4587", "TG-860");
        hashMap2.put("D4591", "TG-870");
        hashMap2.put("D4809", "C2500L");
        hashMap2.put("D4842", "E-10");
        hashMap2.put("D4856", "C-1");
        hashMap2.put("D4857", "C-1Z,D-150Z");
        hashMap2.put("DCHC", "D500L");
        hashMap2.put("DCHT", "D600L / D620L");
        hashMap2.put("K0055", "AIR-A01");
        hashMap2.put("S0003", "E-330");
        hashMap2.put("S0004", "E-500");
        hashMap2.put("S0009", "E-400");
        hashMap2.put("S0010", "E-510");
        hashMap2.put("S0011", "E-3");
        hashMap2.put("S0013", "E-410");
        hashMap2.put("S0016", "E-420");
        hashMap2.put("S0017", "E-30");
        hashMap2.put("S0018", "E-520");
        hashMap2.put("S0019", "E-P1");
        hashMap2.put("S0023", "E-620");
        hashMap2.put("S0026", "E-P2");
        hashMap2.put("S0027", "E-PL1");
        hashMap2.put("S0029", "E-450");
        hashMap2.put("S0030", "E-600");
        hashMap2.put("S0032", "E-P3");
        hashMap2.put("S0033", "E-5");
        hashMap2.put("S0034", "E-PL2");
        hashMap2.put("S0036", "E-M5");
        hashMap2.put("S0038", "E-PL3");
        hashMap2.put("S0039", "E-PM1");
        hashMap2.put("S0040", "E-PL1s");
        hashMap2.put("S0042", "E-PL5");
        hashMap2.put("S0043", "E-PM2");
        hashMap2.put("S0044", "E-P5");
        hashMap2.put("S0045", "E-PL6");
        hashMap2.put("S0046", "E-PL7");
        hashMap2.put("S0047", "E-M1");
        hashMap2.put("S0051", "E-M10");
        hashMap2.put("S0052", "E-M5MarkII");
        hashMap2.put("S0059", "E-M10MarkII");
        hashMap2.put("S0061", "PEN-F");
        hashMap2.put("S0065", "E-PL8");
        hashMap2.put("S0067", "E-M1MarkII");
        hashMap2.put("SR45", "D220");
        hashMap2.put("SR55", "D320L");
        hashMap2.put("SR83", "D340L");
        hashMap2.put("SR85", "C830L,D340R");
        hashMap2.put("SR852", "C860L,D360L");
        hashMap2.put("SR872", "C900Z,D400Z");
        hashMap2.put("SR874", "C960Z,D460Z");
        hashMap2.put("SR951", "C2000Z");
        hashMap2.put("SR952", "C21");
        hashMap2.put("SR953", "C21T.commu");
        hashMap2.put("SR954", "C2020Z");
        hashMap2.put("SR955", "C990Z,D490Z");
        hashMap2.put("SR956", "C211Z");
        hashMap2.put("SR959", "C990ZS,D490Z");
        hashMap2.put("SR95A", "C2100UZ");
        hashMap2.put("SR971", "C100,D370");
        hashMap2.put("SR973", "C2,D230");
        hashMap2.put("SX151", "E100RS");
        hashMap2.put("SX351", "C3000Z / C3030Z");
        hashMap2.put("SX354", "C3040Z");
        hashMap2.put("SX355", "C2040Z");
        hashMap2.put("SX357", "C700UZ");
        hashMap2.put("SX358", "C200Z,D510Z");
        hashMap2.put("SX374", "C3100Z,C3020Z");
        hashMap2.put("SX552", "C4040Z");
        hashMap2.put("SX553", "C40Z,D40Z");
        hashMap2.put("SX556", "C730UZ");
        hashMap2.put("SX558", "C5050Z");
        hashMap2.put("SX571", "C120,D380");
        hashMap2.put("SX574", "C300Z,D550Z");
        hashMap2.put("SX575", "C4100Z,C4000Z");
        hashMap2.put("SX751", "X200,D560Z,C350Z");
        hashMap2.put("SX752", "X300,D565Z,C450Z");
        hashMap2.put("SX753", "C750UZ");
        hashMap2.put("SX754", "C740UZ");
        hashMap2.put("SX755", "C755UZ");
        hashMap2.put("SX756", "C5060WZ");
        hashMap2.put("SX757", "C8080WZ");
        hashMap2.put("SX758", "X350,D575Z,C360Z");
        hashMap2.put("SX759", "X400,D580Z,C460Z");
        hashMap2.put("SX75A", "AZ-2ZOOM");
        hashMap2.put("SX75B", "D595Z,C500Z");
        hashMap2.put("SX75C", "X550,D545Z,C480Z");
        hashMap2.put("SX75D", "IR-300");
        hashMap2.put("SX75F", "C55Z,C5500Z");
        hashMap2.put("SX75G", "C170,D425");
        hashMap2.put("SX75J", "C180,D435");
        hashMap2.put("SX771", "C760UZ");
        hashMap2.put("SX772", "C770UZ");
        hashMap2.put("SX773", "C745UZ");
        hashMap2.put("SX774", "X250,D560Z,C350Z");
        hashMap2.put("SX775", "X100,D540Z,C310Z");
        hashMap2.put("SX776", "C460ZdelSol");
        hashMap2.put("SX777", "C765UZ");
        hashMap2.put("SX77A", "D555Z,C315Z");
        hashMap2.put("SX851", "C7070WZ");
        hashMap2.put("SX852", "C70Z,C7000Z");
        hashMap2.put("SX853", "SP500UZ");
        hashMap2.put("SX854", "SP310");
        hashMap2.put("SX855", "SP350");
        hashMap2.put("SX873", "SP320");
        hashMap2.put("SX875", "FE180/X745");
        hashMap2.put("SX876", "FE190/X750");
    }

    public C5776f0() {
        mo17120E(new C5773e0(this));
    }

    /* renamed from: W */
    private void m21793W(byte[] bArr) {
        C5713n nVar = new C5713n(bArr);
        nVar.mo17099s(true);
        int length = bArr.length / 4;
        int i = 0;
        while (i < length) {
            try {
                mo17125J(61440 + i, nVar.mo17087f());
                i++;
            } catch (IOException e) {
                e.printStackTrace();
                return;
            }
        }
    }

    /* renamed from: C */
    public void mo17118C(int i, byte[] bArr) {
        if (i == 1 || i == 3) {
            m21793W(bArr);
        } else {
            super.mo17118C(i, bArr);
        }
    }

    /* renamed from: V */
    public boolean mo17478V() {
        Long m = mo17149m(61447);
        return m != null && m.longValue() == 5;
    }

    /* renamed from: n */
    public String mo17104n() {
        return "Olympus Makernote";
    }

    /* access modifiers changed from: protected */
    /* renamed from: w */
    public HashMap<Integer, String> mo17105w() {
        return f16281f;
    }
}
